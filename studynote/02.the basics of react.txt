- 우리가 무언가를 배우는데, 그것이 어떻게 문제를 해결하는지 모른다면 우리는 무조건 암기를 해야만 한다.
- 해결하고자 하는 문제를 제대로 이해해야, 해결책을 이해할 수 있다.
- React JS는 UI를 interactive하게 만들어준다. 아주 심플한 방식으로

<js로 앱을 만들려면?>
1) html 요소에 id나 class를 준다.
2) js의 getelementbyIds나 queryselector로 해당 요소를 찾는다.
3) 이벤트리스너로 클릭 이벤트를 준다.
4) 함수를 만들고 실행시킨다.

->ReactJS는 이것들에 대한 지름길을 모아놓은 것이라 할 수 있다.

count app으로 본 js로 앱 만드는 과정
1) html 만들기
2) js에서 html 가져오기
3) 이벤트 감지하기
4) 데이터 업데이트
5) html 업데이트
간단한 앱을 만드는 데 4분이 걸렸다?

<!DOCTYPE html>
<html>
    <body></body>
    <script src="https://unpkg.com/react@17/umd/react.development.js" />
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js" />
    <script>
    </script>
</html>
리액트 하기 위한 준비! 리액트 스크립트 가져오기. (이게 있어야 리액트 코드 사용 가능)


[2-2 Our First React Element]
ReactJS element 만들기
React JS 규칙 중 하나 : 직접 HTML에 작성하지 않고, js코드만 사용한다. (span, button 등을 만들기 위해서.)
하지만 사람들이 보편적으로 사용하는 방법은 아니다..! 
엔진


React JS : 어플리케이션이 아주 interactive하게 하도록 만들어 주는 library
react-dom : library, package. 
react element를 html에 두는 역할을 수행해줌.

render : 사용자에게 '보여주다'

ReactDOM.render()의 괄호 안에는 두 가지가 와야 한다.
1) 무엇을 넣어주느냐 (html 요소)
2) 어디에 넣어주느냐 (주로 div id root에 넣음.)

React.createElement 괄호 안에 올 수 있는 두 가지 인자
(이걸 다시 할 일은 없지만..ㅋㅋ)
1) 어떤 걸 생성할 것인가
2) property
        const span = React.createElement("span", { id:"sexy-span" });
3) content(내용)
        const span = React.createElement("span", { id:"sexy-span" }, "나는 span이에요." );


reactJS는 우리가 했던 것과 정반대의 처리방식을 보여주고 있다.
- 모든 것이 js로 시작해서 htmldㅣ 된다. (ReactJS 파워의 핵심)
- 이 말은, ReactJS는 유저에게 보여줄 내용을 컨트롤 할 수 있다.
- ReactJS에게 업데이트르해야 하는 HTML을 바로 업데이트하라고 말할 것이다.
- js를 이용해 element 생성, 그 ele을 html로 변경.

[2-3. Events in React]
- span, button을 모두 render하는 방법 : div로 감싸버리자!

        const container = React.createElement("div",null, [span, btn])

- React.createElement()로 위 js로 한 과정을 모두 대체할 수 있었다.
- event listener가 필요가 없다고?? 'ㅁ'
- html태그 등록 후, event를 추가해줄 수 있다.
- interactive한 app에서 하는 작업들 모두가, 사실 event들을 감지하는 일이다. 
- 그래서 addEventListner 반복하는 대신, property로 event를 등록할 수 있게 된 것이다.


[2-4. recap]
1) React JS와 React DOM 코드 import하기
- ReactJS는 interactive한 파워 가지고있다!
- ReactDOM은 js를 htmlfㅗ 바꿔줌

2) empty divdㅔ다가 ReactDOM.render로 html 넣어주기
인자 1은 변수명, 2는 어디에 넣을것인지.

ReacDOM은 container ele을 html에 넣어줄 것이다.
여러 개 넣고 싶으면 배열로!

3) React.createElement()속 argument 순서는 기억할 필요가 없다. 그치만..
첫번째 : root에 들어갈 ele
두번째 : props
세번째 : content

ReactJS는 interactive한 app 만들기 위해 제작되었다.
prop object에 event listner 등록이 가능하다.
엄청 좋다!

[2-5. JSX]
createElement를 대체할 수 있는 방법이 있다구!!
html 요소를 너무 쉽게 만들 수 있대요~

JSX 설치하는 방법 -> Babel 사용 (코드 transformer) 
jSX 코드를 브라우저가 이해하도록 바꾸어준다.
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    import 후
    <script type="text/babel">
    script type 이렇게 변경해주기

[2-6. JSX part 2]
변수 안에 html을 담아서 활용하는 방법 (컴포넌트 만들기)
-> 함수로 만들어버리는 것이다!!!

변수에다가 화살표 함수를 쓰는 것은 function+return과 같은 기능을 한다.

그러면 만들어진 함수를 어떻게 이용할것인가?
-> 함수들을 마치 일반적인 HTML 태그인것처럼 넣는다.

const Container = 
    <div>
    <Title />
    <Button />
    </div>

컴포넌트의 첫 글자는, 반드시 대물자여야 한다.
컴포넌트 안에는 html 태그가 들어가 있다.
만약 소문자는 React와 JSX는 HTML 요소와 헷갈릴 것이다. (Button과 button을 떠올려보세요!)
우리가 직접 만든 요소는 모두 전부 대문자로 적어주자.

JSX는 어플리케이션을 여러 요소로 나누어 관리하게 해 준다.
잘깨 쪼개서 만들고, 합쳐 주면 된다.
Babel을 살펴보면, 모든 게 다 React.createElement(); 투성이라는 사실을 확인할 수 있다.

