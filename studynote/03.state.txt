[3.0 Understanding State]
값이 바뀔 데이터를 효과적으로 관리하는 방법! state

간단한 카운터를 만들어보자 :)

jSX에서 함수 삽입하는 법 : 중괄호 열고 변수 이름 담아주기. 
vanila js랑 다르다! 

카운터 만드는 법 1)
변수 연결하기 (위에서 let으로 변수 선언 후 밑에서 중괄호로 불러와서 사용한다.) 그 후 카운트를 up시켜주는 함수를 만든다.
이벤트리스너 대신 onClick에 함수 넣어준다.

이 경우 동작은 하지만 UI에 반영이 되지 않는다 (카운터가 오르지 않음.)

원인 : 우리가 어플리케이션을 시작하면 0이고, 함수는 바로 실행되지 않는다.
but 밑에 있는 reder가 먼저 실행된다.
그래서 render가 시작할 때 카운터는 0인 h3이 Container로 불러와주는 것이다. (렌더링을 한 번만 해서 생기는 문제)

방법 : re-rendering
counterUp에 render 넣어서 강제 리렌더링 해준다.

과정
1) 어플리케이션 시작할 때, Container를 렌더링한다.
2) Container가 redering될 때, counter는 0이다.
3) 이벤트리스너에 의해 countUp 실행될때마다 counter는 1씩 더해진다.
4) re-rendering을 통해 값을 업데이트시켜준다. 1부터 과정이 반복되지만, 이때 Container는 업데이트된 값을 가지게 된다.

문제 : 값을 바꿀때마다, 리렌더링을 해줘야 하는데 결코 좋은 방법이 아니다.

*리액트의 대박 쩌는 기능*
이전에 렌더링 된 컴포넌트가 어떤 거였는지 확인한다.
그 다음 렌더링될 컴포넌트를 확인한 후
업데이트가 필요한 부분만 다시 불러온다. 
바뀐 부분만 업데이트된다. 인터랙티브한 앱 생성이 가능!

->리렌더링 하는 더 좋은 방법이 없을까?

[3.1 setState Part One]
state : react를 이용해 자동으로 값을 보관하고, 업데이트할 수 있는 기능
React.js가 우리가 원하는 리렌더링을 도와주는 방법!

React.useState(); 
const data에 담다서 console.log(data)해 주면
[undefined, f(함수)] 배열로 받는다.

여기서 배열의 첫번째 요소 undefined는 바꿀 데이터, 배열의 두번째 요소 함수는 데이터를 바꿀 때 사용하는 함수를 뜻한다.

초기값은 괄호 안에 적는다. 
ex) React.useState(0);


만약 이 배열 안에 있는 것들을 사요하고 싶으면, 변수를 따로 지정해야 한다.
const tomato = food[1];
하지만 이건 구린 방법이다 (니꼬에 의하면)

const food = ["tomato", "potato"];
const [myFavFood, mySecondFavFood] = food;
결과값
myFavFood = "tomato"
mySecondFavFood = "potato"

이 원리로 let 배열 = React.useState(); 사용해보자.

[3.2 setState part Two]
React.useState(); 사용하니까 UI에는 입력이 안되는 오류 일어남.
콘솔로그 해보면, 값은 정상적으로 업데이트 되고 있음.
-> 렌더링 문제 (렌더 함수를 한번 더 호출해야 함) 리렌더링을 어떻게 생길까?

const [counter, modifier] = React.useState(0);

modifier();
modifier 함수는 어떤값을 부여하든, 그 값으로 업데이트하고 리렌더링을 일으킨다.
핵심은, 리렌더링이 자동으로 일어나는 것.

state 사용하기
React.useState 함수는 counter같은 데이터를 숫자형 데이터로 건네준다.
그리고 그 데이터값을 바꿀 수 있는 함수를 준다.
그 함수가 실행되면 값이 바뀌고, 리렌더링이 된다.
굉장히 멋진 기능이다!

요소 이름을 보통 counter, setCounter 이런식으로 짓는다.

counter는 const이지만 객체를 참조하고 있기때문에 재할당불가로, 참조하고 있는 객체의 주소는 절대 변경이 불가능하지만 그 객체는 변경이 가능해서 counter가 변경이 가능한 것처럼 보이는 시각적 효과가 생긴다. (배열은 객체다.)

이 강의가 대박인 건, 리액트로 할 수 있는 것들이 어떤 원리로 이루어지는지..!! 정말 간결한 언어로 소개해 준다는 것이다.

이벤트리스너, 온클릭을 대체해버리다!

[3.3 Recap]
state의 기본 원리
const [기본값, 기본값 데이터 변환시키는 함수] = React.useState(초기값);
여기서 함수는 기본값을 변화시키고, 자동 리렌더링을 시켜주는 역할을 한다.

함수는 state를 변경할 때, 컴포넌트를 재생성 시켜준다.
하지만 변화는 모든 곳에서 일어나지 않는다. 바꾸고자 하는 부분에만 일어난다.

[3.4 State Functions]
    const [counter, modifier] = React.useState(0);
    const onClick = () => {
        modifier(counter + 1);
    };
이 방법을ㅅ 쓰게 되면, counter가 어디선가 업데이트 될 수 있기 때문에 좋은 방법이 아니라고 할 수 있다.
(원하는 결과를 얻지 못할수도 있다.)

state로 값을 바꾸는 두 가지 방법
1) setCounter();안에 원하는 값을 직접 넣어준다.
2) 이전 값을 바탕으로 현재 값을 설정하고 싶다면 ? -> 함수를 이용한다.
setCounter(함수 넣기)
setCounter((current)=> current +1)
current는 현재 값. 
이렇게 해야 데이터가 다른 곳에서 변할 가능성을 줄일 수 있다.

[3.5 Inputs and State]
unit conversion(단위 변환) 프로그램 만들기 :)
1) 분->시 컨버터 만들기
label이란? input 옆에 써주는 글씨로, 이 글씨를 눌러도 input이 선택된다.
label이랑 input 연결시키는 법
input에 id 걸고 label for=""에 같은 값 입력
하지만..JSX에서는 다르게 구현해야 한다. 우리는 html쓰는 게 아니야! 
for은 자바스크립트 용어(선점된 언어)

따라서 class는 className, for은 htmlFor로 써줘야한다.

ReactJS에서 input의 value 가져오기? 
1) setState함수를 사용한다. 배열 요소명을 minutes(값), setMinutes(값 변경하는 함수)로 지정한다.
2) value값에 minutes를 넣어준다.
3) onChange에 onChange 함수를 거는데, 이 함수는 이벤트를 받아 setMinutes를 실행시킨다. setMinutes는 event.target.value이다.
4) 리렌더링 -> 값 업데이트됨.

[3.6 State Practice part One]
input의 value를 state로 넣어주면, input과 입력하는 값이 연결된다. (매우 유용함.)
onChange함수의 핵심 : 값을 '업데이트'해준다.

useState에 필요한 것 
1) event를 들어주는 것
2) event가 발생했을 때, 값을 업데이트 해주고 UI에 보여주는 것

입력하면 자동으로 시로 바꿔주는 법
value 값에 똑같은 state 넣고
state / 60 (시로 바꾸기) 해준 다음
onchange는 걸지 않는다.
button 추가하고 onClick , 함수에는 setMinutes담긴다 (초기화. 값을 0으로 만들어줌)

[2.7 State Practice Part Two]
flip function 만들기
(hours, minutes 각각 disabled 만들어주기)

useState 이용한다. 
    const [flipped, setFlipped] = React.useState(false);

여기서 flipped는 단순히 true or false인 변수다.

우리가 flip 버튼을 누르면, onFlip이 실행됨.

onFlip는 현재 값을 받아서, 그 값과 반대되는 값을 내놓는다.

그 다음 미션 :                        
value={Math.round(minutes / 60)} 은 minutes 입력할 때만 일어나야 한다. hours 창에 입력할 때는 쓴 숫자 그대로야만 한다.

삼항 연산자를 이용해서, flipped상태에 따라 입력되는 걸 다르게 만들 수 있다.

*댓글요약*
flip
const onFlip = () => setFlipped(!flipped);
-> flipped가 true라면 부정명제인 !flipped는 false
-> false라면 true

state값으로 input을 enabled할지 disabled 할지를 결정할 수 있음

디폴트 값이 false 라고 정했으므로 Hours는 disabled 되어야함
그래서 disabled={flipped === false}를 써줘서
flipped가 false라면, disabled는 true가 되도록 만들어줌
Minuets에는 반대로
disabled={flipped === true}라고 써줌
그러나
Hours는
disabled={!flipped}
Minuets에는 반대로
disabled={flipped}
주는게 더 짧고 좋음

시간 -> 분 컨버터
삼항연산자(ternary operator) 사용하기
flipped ? amount : amount / 60
-> 만약 flipped 상태면 state에 있는 값을 그대로 보여주기
아니라면 60으로 나눈 변환된 값 보여주기
value={flipped ? amount * 60 : amount}
-> 만약 flipped 상태면 60으로 곱한 변환된 값 보여주기
아니라면 state에 있는 값을 그대로 보여주기

flip누르면 변화된 값 그대로 가져오므로
onFlip 변수에 reset(); 넣어주기